buildscript {
    repositories {
        jcenter() // this applies only to the Gradle 'Shadow' plugin
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.1.0'
    }
}

plugins {
    id 'java'
    id 'scala'
    id 'application'
    // shadow plugin to produce fat JARs
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}


// NOTE: We cannot use "compileOnly" or "shadow" configurations since then we could not run code
// in the IDE or with "gradle run". We also cannot exclude transitive dependencies from the
// shadowJar yet (see https://github.com/johnrengelman/shadow/issues/159).
// -> Explicitly define the // libraries we want to be included in the "flinkShadowJar" configuration!
configurations {
    scalaCompilerPlugin

    flinkShadowJar // dependencies which go into the shadowJar

    // always exclude these (also from transitive dependencies) since they are provided by Flink
    flinkShadowJar.exclude group: 'org.apache.flink', module: 'force-shading'
    flinkShadowJar.exclude group: 'com.google.code.findbugs', module: 'jsr305'
    flinkShadowJar.exclude group: 'org.slf4j'
    flinkShadowJar.exclude group: 'org.apache.logging.log4j'
}

application {
    mainClassName = 'ilegra.ApplicationJob'
}

// artifact properties
group = 'ilegra'
version = '0.1-SNAPSHOT'
description = """Flink Job"""

ext {
    javaVersion = '1.8'
    flinkVersion = '1.11.0'
    scalaLibrary = '2.11.12'
    scalaBinaryVersion = '2.11'
    slf4jVersion = '1.7.15'
    log4jVersion = '1.2.17'
    scalaTest = '3.0.0'
    scalaCheck = '1.15.1'
    junit = '4.13'
    scalacheckShapeless = '1.2.5'
    scalacheckDatetime = '0.3.5'
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

applicationDefaultJvmArgs = ["-Dlog4j.configurationFile=log4j.properties"]

// declare where to find the dependencies of your project
repositories {
    jcenter()
    mavenCentral()
    maven { url "https://repository.apache.org/content/repositories/snapshots/" }
}

// declare the dependencies for your production and test code
dependencies {

    //we are using compile, for shadow pluging to copy the dependencies into the jar
    compile "org.scala-lang:scala-library:${scalaLibrary}"

    compile "org.apache.flink:flink-streaming-scala_${scalaBinaryVersion}:${flinkVersion}"
    compile "org.apache.flink:flink-clients_${scalaBinaryVersion}:${flinkVersion}"

    compile "com.typesafe.scala-logging:scala-logging_${scalaBinaryVersion}:3.9.2"
    compile "log4j:log4j:${log4jVersion}"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "org.slf4j:slf4j-log4j12:${slf4jVersion}"

    testImplementation "org.apache.flink:flink-test-utils_${scalaBinaryVersion}:${flinkVersion}"
    testImplementation "org.scalatest:scalatest_${scalaBinaryVersion}:${scalaTest}"
    testImplementation "junit:junit:${junit}"
    testImplementation "org.scalacheck:scalacheck_${scalaBinaryVersion}:${scalaCheck}"
    testImplementation "com.github.alexarchambault:scalacheck-shapeless_1.14_${scalaBinaryVersion}:${scalacheckShapeless}"
    testImplementation "com.47deg:scalacheck-toolbox-datetime_${scalaBinaryVersion}:${scalacheckDatetime}"

    scalaCompilerPlugin 'org.scalamacros:paradise_2.11.12:2.1.1'
}

compileScala {
    scalaCompileOptions.optimize = true
    scalaCompileOptions.additionalParameters = ['-target:jvm-1.8', '-Ybackend:GenBCode', '-feature',
                                                '-language:postfixOps', '-language:implicitConversions', '-language:higherKinds',
                                                "-Xplugin:" + configurations.scalaCompilerPlugin.asPath]
}

// make compileOnly dependencies available for tests:
sourceSets {
    main.compileClasspath += configurations.flinkShadowJar
    main.runtimeClasspath += configurations.flinkShadowJar

    test.compileClasspath += configurations.flinkShadowJar
    test.runtimeClasspath += configurations.flinkShadowJar

    javadoc.classpath += configurations.flinkShadowJar
}

run.classpath = sourceSets.main.runtimeClasspath

jar {
    manifest {
        attributes 'Main-Class': 'ilegra.ApplicationJob'
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

shadowJar {
    configurations = [project.configurations.flinkShadowJar]
}

compileJava.options.encoding = 'UTF-8'
compileScala.options.encoding = 'UTF-8'